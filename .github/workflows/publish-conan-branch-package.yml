name: Conan packaging

on:
  workflow_call:
    inputs:
      public_artifactory:
        type: boolean
        default: false
      os:
        required: true
        type: string
        default: ubuntu-22.04
      compiler:
        type: string
        default: clang-16
      cmake-version:
        type: string
        default: 3.21.7
      conan-version:
        type: string
        default: 2.0.13
      conan-options:
        type: string
    secrets:
      CONAN_USER:
        required: true
      CONAN_PW:
        required: true

jobs:
  publish-conan-branch-package:
    name: Creates a conan package for the branch and uploads it to conan.dice-research.org
    runs-on: ${{ inputs.os }}
    steps:
      # setup env
      - name: Install tools and requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3 python3-pip

      - name: Add repos for for gcc-13 and clang-16
        run: |
          # gcc-13
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y

          # clang-16
          source /etc/os-release
          echo "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-16 main" | sudo tee /etc/apt/sources.list.d/llvm-16.list
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/llvm-16.gpg > /dev/null

      - name: Ensure stdlib version
        run: |
          sudo apt install libstdc++-13-dev -y
  
      - name: Get minimum cmake version
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ inputs.cmake-version }}
      - name: Install compiler
        id: install_cc
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: ${{ inputs.compiler }}
      - uses: rui314/setup-mold@v1
      - name: Install conan
        shell: bash
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
        run: |
          pip3 install "conan==${{ inputs.conan-version }}"
          conan profile new --detect default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update env.CXXFLAGS="${CXXFLAGS}" default
          conan profile update env.CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}" default
          conan profile update env.CXX="${CXX}" default
          conan profile update env.CC="${CC}" default
          conan remote add dice-group https://conan.dice-research.org/artifactory/api/conan/tentris
          conan remote add tentris-private https://conan.dice-research.org/artifactory/api/conan/tentris-private
          conan login -p "${{ secrets.CONAN_PW }}" dice-group "${{ secrets.CONAN_USER }}"
          conan login -p "${{ secrets.CONAN_PW }}" tentris-private "${{ secrets.CONAN_USER }}"

      - name: Cache conan data
        id: cache-conan
        uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ env.os }}-${{ env.compiler }}-conan

      - name: Checkout
        uses: actions/checkout@v3

      - name: Collect package identifier information
        shell: bash
        run: |
          # we replace / with - because it is a reserved name in conan's <pkgName>/version@user/channel
          conanized_branch_name=$(echo "${{ github.ref_name }}" | sed "s/\//-/g" | head -c 51)
          pkg_name=$(conan inspect --format json | jq -r '.version')
          pkg_ver=$(conan inspect --format json | jq -r '.name')
          
          echo "conan_package_user=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "conan_package_channel=$conanized_branch_name" >> $GITHUB_ENV
          
          echo "conan_package_identifier="${pkg_name}/${pkg_ver}@${{ github.repository_owner }}/${conanized_branch_name}" >> $GITHUB_ENV

      - name: Create Package
        shell: bash
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
        run: |
          (conan remove -f "${{ env.conan_package_identifier }}:*" || true)
          conan create --user "${{ env.conan_package_user }}" --channel "${{ env.conan_package_channel }}" --build missing -pr:b=default -pr:h=default ${{ inputs.conan-options }} .

      - name: Select public artifactory for upload
        if: ${{ fromJSON(inputs.public_artifactory) }}
        run: |
          echo "remote_artifactory_name=dice-group" >> $GITHUB_ENV

      - name: Select private artifactory for upload
        if: ${{ !fromJSON(inputs.public_artifactory) }}
        run: |
          echo "remote_artifactory_name=tentris-private" >> $GITHUB_ENV

      - name: Upload to artifactory
        shell: bash
        run: |
          conan upload "${{ env.conan_package_identifier }}" --force -r ${{ env.remote_artifactory_name }}
